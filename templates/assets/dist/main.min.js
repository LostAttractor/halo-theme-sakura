var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i = links.length - 1; i >= 0; i--) {
        const link2 = links[i];
        if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule());
};
const _Util = class {
  /**
   * 将 JSON 字符串/字符串转换为 Map 对象
   *
   * @template K Map 对象的键的类型
   * @template V Map 对象的值的类型
   * @param {string|object} json 要转换的 JSON 字符串或Json 对象
   * @returns {Map<K, V>} 转换后的 Map 对象
   * @throws 当传入的 JSON 字符串格式不正确时，会抛出异常
   */
  static jsonToMap(json) {
    try {
      let obj = json;
      if (json instanceof String) {
        obj = JSON.parse(json.toString());
      }
      const entries = Object.entries(obj);
      return new Map(entries);
    } catch (error) {
      throw new Error(`解析 JSON 失败：${error.message}`);
    }
  }
  /*
   * 生成随机颜色
   * @returns {string} 颜色值，如：#ffffff
   */
  static generateColor() {
    const hue = Math.floor(Math.random() * 360);
    const saturation = Math.floor(Math.random() * 50) + 50;
    const lightness = Math.floor(Math.random() * 40) + 50;
    const h = hue / 60;
    const s = saturation / 100;
    const l = lightness / 100;
    const c = (1 - Math.abs(2 * l - 1)) * s;
    const x = c * (1 - Math.abs(h % 2 - 1));
    const m = l - c / 2;
    let r, g, b;
    if (0 <= h && h < 1) {
      [r, g, b] = [c, x, 0];
    } else if (1 <= h && h < 2) {
      [r, g, b] = [x, c, 0];
    } else if (2 <= h && h < 3) {
      [r, g, b] = [0, c, x];
    } else if (3 <= h && h < 4) {
      [r, g, b] = [0, x, c];
    } else if (4 <= h && h < 5) {
      [r, g, b] = [x, 0, c];
    } else {
      [r, g, b] = [c, 0, x];
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    const red = r.toString(16).padStart(2, "0");
    const green = g.toString(16).padStart(2, "0");
    const blue = b.toString(16).padStart(2, "0");
    return `#${red}${green}${blue}`;
  }
  /**
   * 统计文章字数
   * 按词统计
   *
   * @param document 文章的 DOM 对象
   * @returns 文章字数, 0 表示没有内容
   */
  static getWordCount(document2) {
    var _a, _b;
    return ((_b = (_a = document2.textContent) == null ? void 0 : _a.normalize().match(_Util.wordPattern)) == null ? void 0 : _b.length) ?? 0;
  }
  /**
   * 根据文章字数，计算预计阅读时间，单位 秒
   *
   * @param wordCount 文章字数
   * @param coefficient 文章难度系数，默认难度为 3，最小为 1，最大为 6。值越小代表越难以理解
   * @returns 预计阅读时间，单位 秒
   */
  static caclEstimateReadTime(wordCount, coefficient = 3) {
    const defaultSpeed = 400;
    coefficient = Math.min(6, Math.max(1, coefficient));
    var speed = defaultSpeed + (coefficient - 1) * 100;
    return Math.ceil(wordCount / speed * 60);
  }
  static minuteToTimeString(minutes) {
    let timeStr = "";
    const day = Math.floor(minutes / 3600 / 24);
    if (day !== 0) {
      timeStr = timeStr + day + " 天 ";
    }
    const hours = Math.floor(minutes / 3600 % 24);
    if (day !== 0 || hours !== 0) {
      timeStr = timeStr + hours + " 小时 ";
    }
    const points = Math.floor(minutes / 60 % 60);
    if (hours !== 0 || points !== 0) {
      timeStr = timeStr + points + " 分钟 ";
    }
    const seconds = Math.floor(minutes % 60);
    if (points !== 0 || seconds !== 0) {
      timeStr = timeStr + seconds + " 秒";
    }
    return timeStr;
  }
  /**
   * 将时间转化为距目前多长时间的格式
   *
   * @param time 时间字符戳
   * @returns {string|*} 距离时间格式的字符串形式
   */
  static timeAgo(time) {
    const currentTime = (/* @__PURE__ */ new Date()).getTime();
    const betweenTime = currentTime - time;
    const days = Math.floor(betweenTime / (24 * 3600 * 1e3));
    if (days === 0) {
      const leave1 = betweenTime % (24 * 3600 * 1e3);
      const hours = Math.floor(leave1 / (3600 * 1e3));
      if (hours === 0) {
        const leave2 = leave1 % (3600 * 1e3);
        const minutes = Math.floor(leave2 / (60 * 1e3));
        if (minutes === 0) {
          const leave3 = leave2 % (60 * 1e3);
          const seconds = Math.round(leave3 / 1e3);
          return seconds + " 秒前";
        }
        return minutes + " 分钟前";
      }
      return hours + " 小时前";
    }
    if (days < 0) {
      return "刚刚";
    }
    if (days < 30) {
      return days + " 天前";
    }
    const years = Math.floor(days / (30 * 12));
    if (years === 0) {
      const months = Math.floor(days / 30);
      return months + " 月前";
    }
    return years + " 年前";
  }
};
let Util = _Util;
__publicField(Util, "PatternString", {
  cjk: "\\p{Script=Han}|\\p{Script=Kana}|\\p{Script=Hira}|\\p{Script=Hangul}",
  word: "[\\p{L}|\\p{N}|._]+"
});
__publicField(Util, "wordPattern", new RegExp(`${_Util.PatternString.cjk}|${_Util.PatternString.word}`, "gu"));
const _WindowEventProxy = class {
  static addEventListener(eventType, listener, delay) {
    let throttle = _WindowEventProxy.throttle(listener, delay);
    let throttles = this.eventThrottles.get(eventType);
    if (!throttles) {
      throttles = /* @__PURE__ */ new Set();
      this.eventThrottles.set(eventType, throttles);
    }
    throttles.add(throttle);
    window.addEventListener(eventType, throttle);
  }
  static throttle(fn, delay) {
    let timer = null;
    return (...args) => {
      if (!timer) {
        timer = window.setTimeout(() => {
          fn.apply(this, args);
          timer = null;
        }, delay);
      }
    };
  }
};
let WindowEventProxy = _WindowEventProxy;
__publicField(WindowEventProxy, "eventThrottles", /* @__PURE__ */ new Map());
var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$1(target, key, result);
  return result;
};
class Events {
  registerNavigationChangeEvent() {
    window.addEventListener("hashchange", (event) => {
      const hashchangeEvent = event;
      if (hashchangeEvent.oldURL.includes("#gallery-")) {
        return;
      }
      const id = location.hash.substring(1);
      if (!id.match(/^[A-z0-9_-]+$/)) {
        return;
      }
      const targetElement = document.getElementById(id);
      if (!targetElement) {
        return;
      }
      if (!targetElement.tagName.match(/^(?:a|select|input|button|textarea)$/i)) {
        targetElement.tabIndex = -1;
      }
      targetElement.focus();
    }, false);
  }
  registerMobileNav() {
    var _a, _b;
    const documents = document.querySelectorAll(".container, .site-nav-toggle, .site-sidebar");
    (_a = document.querySelector(".nav-toggle")) == null ? void 0 : _a.addEventListener("click", () => {
      documents.forEach((element) => {
        element.classList.add("open");
      });
    });
    (_b = document.querySelector(".site-sidebar")) == null ? void 0 : _b.addEventListener("click", () => {
      documents.forEach((element) => {
        element.classList.remove("open");
      });
    });
  }
  registerHeaderEvent() {
    const topmostCoordinate = 0;
    let currentTopCoordinate = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
    WindowEventProxy.addEventListener(
      "scroll",
      () => {
        const scrollTopCoordinate = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
        const siteHeaderElement = document.querySelector(".site-header");
        if (scrollTopCoordinate === topmostCoordinate) {
          siteHeaderElement == null ? void 0 : siteHeaderElement.classList.remove("yya");
        } else {
          siteHeaderElement == null ? void 0 : siteHeaderElement.classList.add("yya");
        }
        if (scrollTopCoordinate > currentTopCoordinate) {
          siteHeaderElement == null ? void 0 : siteHeaderElement.classList.remove("sabit");
        } else {
          siteHeaderElement == null ? void 0 : siteHeaderElement.classList.add("sabit");
        }
        currentTopCoordinate = scrollTopCoordinate;
      },
      200
    );
  }
  registerPostListPaginationEvent() {
    const paginationElement = document.getElementById("pagination");
    if (!paginationElement) {
      return;
    }
    const listPaginationLinkElement = paginationElement.querySelector("a");
    if (!listPaginationLinkElement) {
      return;
    }
    listPaginationLinkElement.addEventListener("click", (event) => {
      event.preventDefault();
      const postListElement = document.getElementById("main");
      if (!postListElement) {
        return;
      }
      const targetElement = event.target;
      const url = targetElement.href;
      targetElement.classList.add("loading");
      targetElement.textContent = "";
      fetch(url, {
        method: "GET"
      }).then((response) => response.text()).then((html) => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const postListNewElements = doc.querySelectorAll("#main .post");
        if (postListNewElements && postListNewElements.length > 0) {
          postListNewElements.forEach((element) => {
            postListElement.appendChild(element);
          });
        }
        const nextPaginationElement = doc.querySelector("#pagination a");
        if (nextPaginationElement) {
          targetElement.href = nextPaginationElement.href;
        } else {
          paginationElement.innerHTML = "<span>没有更多文章了</span>";
        }
      }).catch((error) => {
        console.error(error);
      }).finally(() => {
        targetElement.classList.remove("loading");
        targetElement.textContent = "下一页";
        I18N.init();
      });
    });
  }
  registerThemeChangeEvent() {
    const themeChangeButtonElements = document.querySelectorAll(".theme-change-js");
    themeChangeButtonElements.forEach((element) => {
      element.addEventListener("click", () => {
        var _a;
        (_a = document.querySelector(".skin-menu")) == null ? void 0 : _a.classList.toggle("show");
      });
    });
  }
  registerThemeItemClickEventAndDefaultTheme() {
    const themeModelElement = document.querySelector(".skin-menu");
    const themeItemElements = themeModelElement == null ? void 0 : themeModelElement.querySelectorAll(".skin-menu .menu-item");
    themeItemElements == null ? void 0 : themeItemElements.forEach((element) => {
      const themeData = JSON.parse(element.getAttribute("data-item") || "{}");
      if (themeData.bg_isdefault) {
        this.registerThemeRevert(themeData);
      }
      element.addEventListener("click", () => {
        this.registerThemeRevert(themeData);
        localStorage.setItem("sakuraTheme", JSON.stringify(themeData));
        themeModelElement == null ? void 0 : themeModelElement.classList.remove("show");
      });
    });
    WindowEventProxy.addEventListener(
      "scroll",
      () => {
        themeModelElement == null ? void 0 : themeModelElement.classList.remove("show");
      },
      200
    );
  }
  registerThemeRevert(themeData) {
    if (!themeData) {
      const localThemeData = localStorage.getItem("sakuraTheme");
      if (!localThemeData) {
        return;
      }
      themeData = JSON.parse(localThemeData);
    }
    const bodyElement = document.querySelector("body");
    if (themeData == null ? void 0 : themeData.bg_url) {
      bodyElement.style.backgroundImage = `url(${themeData == null ? void 0 : themeData.bg_url})`;
    } else {
      bodyElement.style.backgroundImage = "";
    }
    if (themeData == null ? void 0 : themeData.bg_night) {
      bodyElement.classList.add("dark");
    } else {
      bodyElement.classList.remove("dark");
    }
    switch (themeData == null ? void 0 : themeData.bg_img_strategy) {
      case "cover":
        bodyElement.style.backgroundSize = "cover";
        break;
      case "no-repeat":
      case "repeat":
        bodyElement.style.backgroundRepeat = themeData.bg_img_strategy;
        break;
      default:
        bodyElement.style.backgroundSize = "auto";
        bodyElement.style.backgroundRepeat = "auto";
        break;
    }
  }
}
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerNavigationChangeEvent", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerMobileNav", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerHeaderEvent", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerPostListPaginationEvent", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerThemeChangeEvent", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerThemeItemClickEventAndDefaultTheme", 1);
__decorateClass$1([
  documentFunction(false)
], Events.prototype, "registerThemeRevert", 1);
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp2(target, key, result);
  return result;
};
class Utils {
  wrapTableWithBox() {
    const contentElement = document.querySelector(".entry-content");
    const tableElements = contentElement == null ? void 0 : contentElement.querySelectorAll("table");
    tableElements == null ? void 0 : tableElements.forEach((tableElement) => {
      var _a, _b;
      if ((_a = tableElement.parentElement) == null ? void 0 : _a.classList.contains("table-wrapper")) {
        return;
      }
      const tableWrapper = document.createElement("div");
      tableWrapper.classList.add("table-wrapper");
      (_b = tableElement.parentNode) == null ? void 0 : _b.insertBefore(tableWrapper, tableElement);
      tableWrapper.appendChild(tableElement);
    });
  }
  wrapImageWithBox() {
    const contentElement = document.querySelector(".site-content");
    const imageElements = contentElement == null ? void 0 : contentElement.querySelectorAll("img:not(.avatar)");
    imageElements == null ? void 0 : imageElements.forEach((imageElement) => {
      var _a;
      if (imageElement.classList.contains("gallery-img")) {
        return;
      }
      imageElement.classList.add("gallery-img");
      const imageWrapper = document.createElement("a");
      imageWrapper.setAttribute("data-fancybox", "gallery");
      imageWrapper.setAttribute("href", imageElement.getAttribute("src") || "");
      imageWrapper.classList.add("image-wrapper");
      (_a = imageElement.parentNode) == null ? void 0 : _a.insertBefore(imageWrapper, imageElement);
      imageWrapper.appendChild(imageElement);
    });
  }
  registerHighlight() {
    const preElements = document.querySelectorAll("pre");
    preElements.forEach((preElement) => {
      preElement.classList.add("highlight-wrap");
      preElement.setAttribute("autocomplete", "off");
      preElement.setAttribute("autocorrect", "off");
      preElement.setAttribute("autocapitalize", "off");
      preElement.setAttribute("spellcheck", "false");
      preElement.setAttribute("contenteditable", "false");
      const codeElement = preElement.querySelector("code");
      __vitePreload(() => import("./assets/index-599c05fe.js"), true ? ["assets/index-599c05fe.js","assets/_commonjsHelpers-7a7fcd32.js"] : void 0).then(async (highlight) => {
        let lang = "";
        codeElement.classList.forEach((className) => {
          if (className.startsWith("language-")) {
            lang = className.replace("language-", "");
          }
        });
        let language = highlight.default.getLanguage(lang);
        if (!language || !language.name) {
          codeElement.classList.remove(`language-${lang}`);
          const autoLanguage = highlight.default.highlightAuto(codeElement.textContent || "");
          if (!autoLanguage.language) {
            lang = "text";
          } else {
            lang = autoLanguage.language;
          }
          codeElement.classList.add(`language-${lang}`);
        } else {
          lang = language.name;
        }
        codeElement.setAttribute("data-rel", lang.toUpperCase());
        codeElement.classList.add(lang.split(",")[0].toLowerCase());
        highlight.default.highlightElement(codeElement);
        const highlightLineNumber = await __vitePreload(() => import("./libs/highlightjs-line-numbers.min.js"), true ? [] : void 0);
        highlightLineNumber.registerHljsLineNumbers(highlight.default);
        highlight.default.lineNumbersBlock(codeElement);
      });
    });
  }
  registerToc() {
    const tocContainerElements = document.querySelectorAll(".toc-container");
    const headerOffset = 75;
    tocContainerElements.forEach((tocContainerElement) => {
      __vitePreload(() => import("./assets/index-51a9a0b2.js").then((n) => n.i), true ? ["assets/index-51a9a0b2.js","assets/_commonjsHelpers-7a7fcd32.js"] : void 0).then((tocbot) => {
        var _a;
        const tocElement = tocContainerElement.querySelector(".toc");
        const offset = tocContainerElement.getBoundingClientRect().top + window.pageYOffset;
        const collapseDepth = (_a = sakura.getThemeConfig("post").getValue("toc_depth", Number)) == null ? void 0 : _a.valueOf();
        if (!tocElement) {
          return;
        }
        tocbot.default.init({
          tocElement,
          contentSelector: [".entry-content", ".links"],
          headingSelector: "h1, h2, h3, h4, h5",
          collapseDepth,
          positionFixedSelector: ".toc-container",
          positionFixedClass: "toc-container-fixed",
          scrollSmooth: true,
          headingsOffset: -(offset - headerOffset),
          scrollSmoothOffset: -headerOffset,
          disableTocScrollSync: true
        });
      });
    });
  }
}
__decorateClass([
  documentFunction()
], Utils.prototype, "wrapTableWithBox", 1);
__decorateClass([
  documentFunction()
], Utils.prototype, "wrapImageWithBox", 1);
__decorateClass([
  documentFunction()
], Utils.prototype, "registerHighlight", 1);
__decorateClass([
  documentFunction()
], Utils.prototype, "registerToc", 1);
const main = "";
/**
* (c) Iconify
*
* For the full copyright and license information, please view the license.txt or license.gpl.txt
* files at https://github.com/iconify/iconify
*
* Licensed under MIT.
*
* @license MIT
* @version 3.1.0
*/
const defaultIconDimensions = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
const defaultIconTransformations = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
const defaultIconProps = Object.freeze({
  ...defaultIconDimensions,
  ...defaultIconTransformations
});
const defaultExtendedIconProps = Object.freeze({
  ...defaultIconProps,
  body: "",
  hidden: false
});
function mergeIconTransformations(obj1, obj2) {
  const result = {};
  if (!obj1.hFlip !== !obj2.hFlip) {
    result.hFlip = true;
  }
  if (!obj1.vFlip !== !obj2.vFlip) {
    result.vFlip = true;
  }
  const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;
  if (rotate) {
    result.rotate = rotate;
  }
  return result;
}
function mergeIconData(parent, child) {
  const result = mergeIconTransformations(parent, child);
  for (const key in defaultExtendedIconProps) {
    if (key in defaultIconTransformations) {
      if (key in parent && !(key in result)) {
        result[key] = defaultIconTransformations[key];
      }
    } else if (key in child) {
      result[key] = child[key];
    } else if (key in parent) {
      result[key] = parent[key];
    }
  }
  return result;
}
function getIconsTree(data, names) {
  const icons = data.icons;
  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
  const resolved = /* @__PURE__ */ Object.create(null);
  function resolve(name) {
    if (icons[name]) {
      return resolved[name] = [];
    }
    if (!(name in resolved)) {
      resolved[name] = null;
      const parent = aliases[name] && aliases[name].parent;
      const value = parent && resolve(parent);
      if (value) {
        resolved[name] = [parent].concat(value);
      }
    }
    return resolved[name];
  }
  (names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);
  return resolved;
}
function internalGetIconData(data, name, tree) {
  const icons = data.icons;
  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
  let currentProps = {};
  function parse(name2) {
    currentProps = mergeIconData(
      icons[name2] || aliases[name2],
      currentProps
    );
  }
  parse(name);
  tree.forEach(parse);
  return mergeIconData(data, currentProps);
}
function parseIconSet(data, callback2) {
  const names = [];
  if (typeof data !== "object" || typeof data.icons !== "object") {
    return names;
  }
  if (data.not_found instanceof Array) {
    data.not_found.forEach((name) => {
      callback2(name, null);
      names.push(name);
    });
  }
  const tree = getIconsTree(data);
  for (const name in tree) {
    const item = tree[name];
    if (item) {
      callback2(name, internalGetIconData(data, name, item));
      names.push(name);
    }
  }
  return names;
}
const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIconName(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIconName(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIconName(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIconName = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!((icon.provider === "" || icon.provider.match(matchIconName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchIconName)) && icon.name.match(matchIconName));
};
const optionalPropertyDefaults = {
  provider: "",
  aliases: {},
  not_found: {},
  ...defaultIconDimensions
};
function checkOptionalProps(item, defaults) {
  for (const prop in defaults) {
    if (prop in item && typeof item[prop] !== typeof defaults[prop]) {
      return false;
    }
  }
  return true;
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data = obj;
  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  if (!checkOptionalProps(obj, optionalPropertyDefaults)) {
    return null;
  }
  const icons = data.icons;
  for (const name in icons) {
    const icon = icons[name];
    if (!name.match(matchIconName) || typeof icon.body !== "string" || !checkOptionalProps(
      icon,
      defaultExtendedIconProps
    )) {
      return null;
    }
  }
  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
  for (const name in aliases) {
    const icon = aliases[name];
    const parent = icon.parent;
    if (!name.match(matchIconName) || typeof parent !== "string" || !icons[parent] && !aliases[parent] || !checkOptionalProps(
      icon,
      defaultExtendedIconProps
    )) {
      return null;
    }
  }
  return data;
}
const dataStorage = /* @__PURE__ */ Object.create(null);
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function getStorage(provider, prefix) {
  const providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */ Object.create(null));
  return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data)) {
    return [];
  }
  return parseIconSet(data, (name, icon) => {
    if (icon) {
      storage2.icons[name] = icon;
    } else {
      storage2.missing.add(name);
    }
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body === "string") {
      storage2.icons[name] = { ...icon };
      return true;
    }
  } catch (err) {
  }
  return false;
}
function listIcons(provider, prefix) {
  let allIcons = [];
  const providers = typeof provider === "string" ? [provider] : Object.keys(dataStorage);
  providers.forEach((provider2) => {
    const prefixes = typeof provider2 === "string" && typeof prefix === "string" ? [prefix] : Object.keys(dataStorage[provider2] || {});
    prefixes.forEach((prefix2) => {
      const storage2 = getStorage(provider2, prefix2);
      allIcons = allIcons.concat(
        Object.keys(storage2.icons).map(
          (name) => (provider2 !== "" ? "@" + provider2 + ":" : "") + prefix2 + ":" + name
        )
      );
    });
  });
  return allIcons;
}
let simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name) {
  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
  if (icon) {
    const storage2 = getStorage(icon.provider, icon.prefix);
    const iconName = icon.name;
    return storage2.icons[iconName] || (storage2.missing.has(iconName) ? null : void 0);
  }
}
function addIcon(name, data) {
  const icon = stringToIcon(name, true, simpleNames);
  if (!icon) {
    return false;
  }
  const storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = data.provider || "";
  }
  if (simpleNames && !provider && !data.prefix) {
    let added = false;
    if (quicklyValidateIconSet(data)) {
      data.prefix = "";
      parseIconSet(data, (name, icon) => {
        if (icon && addIcon(name, icon)) {
          added = true;
        }
      });
    }
    return added;
  }
  const prefix = data.prefix;
  if (!validateIconName({
    provider,
    prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, prefix);
  return !!addIconSet(storage2, data);
}
function iconExists(name) {
  return !!getIconData(name);
}
function getIcon(name) {
  const result = getIconData(name);
  return result ? {
    ...defaultIconProps,
    ...result
  } : null;
}
const defaultIconSizeCustomisations = Object.freeze({
  width: null,
  height: null
});
const defaultIconCustomisations = Object.freeze({
  ...defaultIconSizeCustomisations,
  ...defaultIconTransformations
});
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1) {
    return size;
  }
  precision = precision || 100;
  if (typeof size === "number") {
    return Math.ceil(size * ratio * precision) / precision;
  }
  if (typeof size !== "string") {
    return size;
  }
  const oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber = unitsTest.test(code);
  while (true) {
    if (isNumber) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber = !isNumber;
  }
}
const isUnsetKeyword = (value) => value === "unset" || value === "undefined" || value === "none";
function iconToSVG(icon, customisations) {
  const fullIcon = {
    ...defaultIconProps,
    ...icon
  };
  const fullCustomisations = {
    ...defaultIconCustomisations,
    ...customisations
  };
  const box = {
    left: fullIcon.left,
    top: fullIcon.top,
    width: fullIcon.width,
    height: fullIcon.height
  };
  let body = fullIcon.body;
  [fullIcon, fullCustomisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push(
          "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"
        );
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push(
        "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"
      );
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift(
          "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
      case 2:
        transformations.unshift(
          "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"
        );
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift(
          "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== box.top) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
    }
  });
  const customisationsWidth = fullCustomisations.width;
  const customisationsHeight = fullCustomisations.height;
  const boxWidth = box.width;
  const boxHeight = box.height;
  let width;
  let height;
  if (customisationsWidth === null) {
    height = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    width = calculateSize(height, boxWidth / boxHeight);
  } else {
    width = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
    height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
  }
  const attributes = {};
  const setAttr = (prop, value) => {
    if (!isUnsetKeyword(value)) {
      attributes[prop] = value.toString();
    }
  };
  setAttr("width", width);
  setAttr("height", height);
  attributes.viewBox = box.left.toString() + " " + box.top.toString() + " " + boxWidth.toString() + " " + boxHeight.toString();
  return {
    attributes,
    body
  };
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body;
  }
  const suffix = "suffix" + (Math.random() * 16777216 | Date.now()).toString(16);
  ids.forEach((id) => {
    const newID = typeof prefix === "function" ? prefix(id) : prefix + (counter++).toString();
    const escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(
      new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"),
      "$1" + newID + suffix + "$3"
    );
  });
  body = body.replace(new RegExp(suffix, "g"), "");
  return body;
}
const browserStorageConfig = {
  local: true,
  session: true
};
const browserStorageEmptyItems = {
  local: /* @__PURE__ */ new Set(),
  session: /* @__PURE__ */ new Set()
};
let browserStorageStatus = false;
function setBrowserStorageStatus(status) {
  browserStorageStatus = status;
}
const browserCacheVersion = "iconify2";
const browserCachePrefix = "iconify";
const browserCacheCountKey = browserCachePrefix + "-count";
const browserCacheVersionKey = browserCachePrefix + "-version";
const browserStorageHour = 36e5;
const browserStorageCacheExpiration = 168;
function getStoredItem(func, key) {
  try {
    return func.getItem(key);
  } catch (err) {
  }
}
function setStoredItem(func, key, value) {
  try {
    func.setItem(key, value);
    return true;
  } catch (err) {
  }
}
function removeStoredItem(func, key) {
  try {
    func.removeItem(key);
  } catch (err) {
  }
}
function setBrowserStorageItemsCount(storage2, value) {
  return setStoredItem(storage2, browserCacheCountKey, value.toString());
}
function getBrowserStorageItemsCount(storage2) {
  return parseInt(getStoredItem(storage2, browserCacheCountKey)) || 0;
}
let _window = typeof window === "undefined" ? {} : window;
function getBrowserStorage(key) {
  const attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  browserStorageConfig[key] = false;
}
function iterateBrowserStorage(key, callback2) {
  const func = getBrowserStorage(key);
  if (!func) {
    return;
  }
  const version = getStoredItem(func, browserCacheVersionKey);
  if (version !== browserCacheVersion) {
    if (version) {
      const total2 = getBrowserStorageItemsCount(func);
      for (let i = 0; i < total2; i++) {
        removeStoredItem(func, browserCachePrefix + i.toString());
      }
    }
    setStoredItem(func, browserCacheVersionKey, browserCacheVersion);
    setBrowserStorageItemsCount(func, 0);
    return;
  }
  const minTime = Math.floor(Date.now() / browserStorageHour) - browserStorageCacheExpiration;
  const parseItem = (index) => {
    const name = browserCachePrefix + index.toString();
    const item = getStoredItem(func, name);
    if (typeof item !== "string") {
      return;
    }
    try {
      const data = JSON.parse(item);
      if (typeof data === "object" && typeof data.cached === "number" && data.cached > minTime && typeof data.provider === "string" && typeof data.data === "object" && typeof data.data.prefix === "string" && callback2(data, index)) {
        return true;
      }
    } catch (err) {
    }
    removeStoredItem(func, name);
  };
  let total = getBrowserStorageItemsCount(func);
  for (let i = total - 1; i >= 0; i--) {
    if (!parseItem(i)) {
      if (i === total - 1) {
        total--;
        setBrowserStorageItemsCount(func, total);
      } else {
        browserStorageEmptyItems[key].add(i);
      }
    }
  }
}
function initBrowserStorage() {
  if (browserStorageStatus) {
    return;
  }
  setBrowserStorageStatus(true);
  for (const key in browserStorageConfig) {
    iterateBrowserStorage(key, (item) => {
      const iconSet = item.data;
      const provider = item.provider;
      const prefix = iconSet.prefix;
      const storage2 = getStorage(
        provider,
        prefix
      );
      if (!addIconSet(storage2, iconSet).length) {
        return false;
      }
      const lastModified = iconSet.lastModified || -1;
      storage2.lastModifiedCached = storage2.lastModifiedCached ? Math.min(storage2.lastModifiedCached, lastModified) : lastModified;
      return true;
    });
  }
}
function toggleBrowserCache(storage2, value) {
  switch (storage2) {
    case "local":
    case "session":
      browserStorageConfig[storage2] = value;
      break;
    case "all":
      for (const key in browserStorageConfig) {
        browserStorageConfig[key] = value;
      }
      break;
  }
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    resources,
    path: source.path || "/",
    maxURL: source.maxURL || 500,
    rotate: source.rotate || 750,
    timeout: source.timeout || 5e3,
    random: source.random === true,
    index: source.index || 0,
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
const fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config2 = createAPIConfig(customConfig);
  if (config2 === null) {
    return false;
  }
  configStorage[provider] = config2;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
function listAPIProviders() {
  return Object.keys(configStorage);
}
const detectFetch = () => {
  let callback2;
  try {
    callback2 = fetch;
    if (typeof callback2 === "function") {
      return callback2;
    }
  } catch (err) {
  }
};
let fetchModule = detectFetch();
function setFetch(fetch2) {
  fetchModule = fetch2;
}
function getFetch() {
  return fetchModule;
}
function calculateMaxLength(provider, prefix) {
  const config2 = getAPIConfig(provider);
  if (!config2) {
    return 0;
  }
  let result;
  if (!config2.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = prefix + ".json?icons=";
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
const prepare = (provider, prefix, icons) => {
  const results = [];
  const maxLength = calculateMaxLength(provider, prefix);
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length = 0;
  icons.forEach((name, index) => {
    length += name.length + 1;
    if (length >= maxLength && index > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length = name.length;
    }
    item.icons.push(name);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    const config2 = getAPIConfig(provider);
    if (config2) {
      return config2.path;
    }
  }
  return "/";
}
const send = (host, params, callback2) => {
  if (!fetchModule) {
    callback2("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      const urlParams = new URLSearchParams({
        icons: iconsList
      });
      path += prefix + ".json?" + urlParams.toString();
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback2("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback2(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data) => {
    if (typeof data !== "object" || data === null) {
      setTimeout(() => {
        if (data === 404) {
          callback2("abort", data);
        } else {
          callback2("next", defaultError);
        }
      });
      return;
    }
    setTimeout(() => {
      callback2("success", data);
    });
  }).catch(() => {
    callback2("next", defaultError);
  });
};
const fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a, b) => {
    if (a.provider !== b.provider) {
      return a.provider.localeCompare(b.provider);
    }
    if (a.prefix !== b.prefix) {
      return a.prefix.localeCompare(b.prefix);
    }
    return a.name.localeCompare(b.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
      return;
    }
    lastIcon = icon;
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    const providerStorage = storage2[provider] || (storage2[provider] = /* @__PURE__ */ Object.create(null));
    const localStorage2 = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));
    let list;
    if (name in localStorage2.icons) {
      list = result.loaded;
    } else if (prefix === "" || localStorage2.missing.has(name)) {
      list = result.missing;
    } else {
      list = result.pending;
    }
    const item = {
      provider,
      prefix,
      name
    };
    list.push(item);
  });
  return result;
}
function removeCallback(storages, id) {
  storages.forEach((storage2) => {
    const items = storage2.loaderCallbacks;
    if (items) {
      storage2.loaderCallbacks = items.filter((row) => row.id !== id);
    }
  });
}
function updateCallbacks(storage2) {
  if (!storage2.pendingCallbacksFlag) {
    storage2.pendingCallbacksFlag = true;
    setTimeout(() => {
      storage2.pendingCallbacksFlag = false;
      const items = storage2.loaderCallbacks ? storage2.loaderCallbacks.slice(0) : [];
      if (!items.length) {
        return;
      }
      let hasPending = false;
      const provider = storage2.provider;
      const prefix = storage2.prefix;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon) => {
          if (icon.prefix !== prefix) {
            return true;
          }
          const name = icon.name;
          if (storage2.icons[name]) {
            icons.loaded.push({
              provider,
              prefix,
              name
            });
          } else if (storage2.missing.has(name)) {
            icons.missing.push({
              provider,
              prefix,
              name
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([storage2], item.id);
          }
          item.callback(
            icons.loaded.slice(0),
            icons.missing.slice(0),
            icons.pending.slice(0),
            item.abort
          );
        }
      });
    });
  }
}
let idCounter = 0;
function storeCallback(callback2, icons, pendingSources) {
  const id = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id,
    icons,
    callback: callback2,
    abort
  };
  pendingSources.forEach((storage2) => {
    (storage2.loaderCallbacks || (storage2.loaderCallbacks = [])).push(item);
  });
  return abort;
}
function listToIcons(list, validate = true, simpleNames2 = false) {
  const result = [];
  list.forEach((item) => {
    const icon = typeof item === "string" ? stringToIcon(item, validate, simpleNames2) : item;
    if (icon) {
      result.push(icon);
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config2, payload, query, done) {
  const resourcesCount = config2.resources.length;
  const startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index;
  let resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    resources = [];
    while (list.length > 1) {
      const nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]);
      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else {
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function subscribe(callback2, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback2 === "function") {
      doneCallbacks.push(callback2);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback2) => {
      callback2(void 0, lastError);
    });
  }
  function clearQueue() {
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function moduleResponse(item, response, data) {
    const isError = response !== "success";
    queue = queue.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data;
      if (!queue.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config2.random) {
      const index = config2.resources.indexOf(item.resource);
      if (index !== -1 && index !== config2.index) {
        config2.index = index;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback2) => {
      callback2(data);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource = resources.shift();
    if (resource === void 0) {
      if (queue.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config2.rotate);
    query(resource, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function initRedundancy(cfg) {
  const config2 = {
    ...defaultConfig,
    ...cfg
  };
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(
      config2,
      payload,
      queryCallback,
      (data, error) => {
        cleanup();
        if (doneCallback) {
          doneCallback(data, error);
        }
      }
    );
    queries.push(query2);
    return query2;
  }
  function find(callback2) {
    return queries.find((value) => {
      return callback2(value);
    }) || null;
  }
  const instance = {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (!redundancyCache[provider]) {
    const config2 = getAPIConfig(provider);
    if (!config2) {
      return;
    }
    const redundancy = initRedundancy(config2);
    const cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback2) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback2(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback2(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback2)().abort;
}
function updateLastModified(storage2, lastModified) {
  const lastValue = storage2.lastModifiedCached;
  if (lastValue && lastValue >= lastModified) {
    return lastValue === lastModified;
  }
  storage2.lastModifiedCached = lastModified;
  if (lastValue) {
    for (const key in browserStorageConfig) {
      iterateBrowserStorage(key, (item) => {
        const iconSet = item.data;
        return item.provider !== storage2.provider || iconSet.prefix !== storage2.prefix || iconSet.lastModified === lastModified;
      });
    }
  }
  return true;
}
function storeInBrowserStorage(storage2, data) {
  if (!browserStorageStatus) {
    initBrowserStorage();
  }
  function store(key) {
    let func;
    if (!browserStorageConfig[key] || !(func = getBrowserStorage(key))) {
      return;
    }
    const set = browserStorageEmptyItems[key];
    let index;
    if (set.size) {
      set.delete(index = Array.from(set).shift());
    } else {
      index = getBrowserStorageItemsCount(func);
      if (!setBrowserStorageItemsCount(func, index + 1)) {
        return;
      }
    }
    const item = {
      cached: Math.floor(Date.now() / browserStorageHour),
      provider: storage2.provider,
      data
    };
    return setStoredItem(
      func,
      browserCachePrefix + index.toString(),
      JSON.stringify(item)
    );
  }
  if (data.lastModified && !updateLastModified(storage2, data.lastModified)) {
    return;
  }
  if (!Object.keys(data.icons).length) {
    return;
  }
  if (data.not_found) {
    data = Object.assign({}, data);
    delete data.not_found;
  }
  if (!store("local")) {
    store("session");
  }
}
function emptyCallback() {
}
function loadedNewIcons(storage2) {
  if (!storage2.iconsLoaderFlag) {
    storage2.iconsLoaderFlag = true;
    setTimeout(() => {
      storage2.iconsLoaderFlag = false;
      updateCallbacks(storage2);
    });
  }
}
function loadNewIcons(storage2, icons) {
  if (!storage2.iconsToLoad) {
    storage2.iconsToLoad = icons;
  } else {
    storage2.iconsToLoad = storage2.iconsToLoad.concat(icons).sort();
  }
  if (!storage2.iconsQueueFlag) {
    storage2.iconsQueueFlag = true;
    setTimeout(() => {
      storage2.iconsQueueFlag = false;
      const { provider, prefix } = storage2;
      const icons2 = storage2.iconsToLoad;
      delete storage2.iconsToLoad;
      let api;
      if (!icons2 || !(api = getAPIModule(provider))) {
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data) => {
          if (typeof data !== "object") {
            item.icons.forEach((name) => {
              storage2.missing.add(name);
            });
          } else {
            try {
              const parsed = addIconSet(
                storage2,
                data
              );
              if (!parsed.length) {
                return;
              }
              const pending = storage2.pendingIcons;
              if (pending) {
                parsed.forEach((name) => {
                  pending.delete(name);
                });
              }
              storeInBrowserStorage(storage2, data);
            } catch (err) {
              console.error(err);
            }
          }
          loadedNewIcons(storage2);
        });
      });
    });
  }
}
const isPending = (icon) => {
  const storage2 = getStorage(
    icon.provider,
    icon.prefix
  );
  const pending = storage2.pendingIcons;
  return !!(pending && pending.has(icon.name));
};
const loadIcons = (icons, callback2) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback2) {
      setTimeout(() => {
        if (callCallback) {
          callback2(
            sortedIcons.loaded,
            sortedIcons.missing,
            sortedIcons.pending,
            emptyCallback
          );
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    const { provider, prefix } = icon;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push(getStorage(provider, prefix));
    const providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */ Object.create(null));
    if (!providerNewIcons[prefix]) {
      providerNewIcons[prefix] = [];
    }
  });
  sortedIcons.pending.forEach((icon) => {
    const { provider, prefix, name } = icon;
    const storage2 = getStorage(provider, prefix);
    const pendingQueue = storage2.pendingIcons || (storage2.pendingIcons = /* @__PURE__ */ new Set());
    if (!pendingQueue.has(name)) {
      pendingQueue.add(name);
      newIcons[provider][prefix].push(name);
    }
  });
  sources.forEach((storage2) => {
    const { provider, prefix } = storage2;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(storage2, newIcons[provider][prefix]);
    }
  });
  return callback2 ? storeCallback(callback2, sortedIcons, sources) : emptyCallback;
};
const loadIcon = (icon) => {
  return new Promise((fulfill, reject) => {
    const iconObj = typeof icon === "string" ? stringToIcon(icon, true) : icon;
    if (!iconObj) {
      reject(icon);
      return;
    }
    loadIcons([iconObj || icon], (loaded) => {
      if (loaded.length && iconObj) {
        const data = getIconData(iconObj);
        if (data) {
          fulfill({
            ...defaultIconProps,
            ...data
          });
          return;
        }
      }
      reject(icon);
    });
  });
};
function mergeCustomisations(defaults, item) {
  const result = {
    ...defaults
  };
  for (const key in item) {
    const value = item[key];
    const valueType = typeof value;
    if (key in defaultIconSizeCustomisations) {
      if (value === null || value && (valueType === "string" || valueType === "number")) {
        result[key] = value;
      }
    } else if (valueType === typeof result[key]) {
      result[key] = key === "rotate" ? value % 4 : value;
    }
  }
  return result;
}
const defaultExtendedIconCustomisations = {
  ...defaultIconCustomisations,
  inline: false
};
const blockClass = "iconify";
const inlineClass = "iconify-inline";
const elementDataProperty = "iconifyData" + Date.now();
let nodes = [];
function findRootNode(node) {
  for (let i = 0; i < nodes.length; i++) {
    const item = nodes[i];
    const root = typeof item.node === "function" ? item.node() : item.node;
    if (root === node) {
      return item;
    }
  }
}
function addRootNode(root, autoRemove = false) {
  let node = findRootNode(root);
  if (node) {
    if (node.temporary) {
      node.temporary = autoRemove;
    }
    return node;
  }
  node = {
    node: root,
    temporary: autoRemove
  };
  nodes.push(node);
  return node;
}
function addBodyNode() {
  if (document.documentElement) {
    return addRootNode(document.documentElement);
  }
  nodes.push({
    node: () => {
      return document.documentElement;
    }
  });
}
function removeRootNode(root) {
  nodes = nodes.filter((node) => root !== node && root !== (typeof node.node === "function" ? node.node() : node.node));
}
function listRootNodes() {
  return nodes;
}
function onReady(callback2) {
  const doc = document;
  if (doc.readyState && doc.readyState !== "loading") {
    callback2();
  } else {
    doc.addEventListener("DOMContentLoaded", callback2);
  }
}
let callback = null;
const observerParams = {
  childList: true,
  subtree: true,
  attributes: true
};
function queueScan(node) {
  if (!node.observer) {
    return;
  }
  const observer = node.observer;
  if (!observer.pendingScan) {
    observer.pendingScan = setTimeout(() => {
      delete observer.pendingScan;
      if (callback) {
        callback(node);
      }
    });
  }
}
function checkMutations(node, mutations) {
  if (!node.observer) {
    return;
  }
  const observer = node.observer;
  if (!observer.pendingScan) {
    for (let i = 0; i < mutations.length; i++) {
      const item = mutations[i];
      if (
        // Check for added nodes
        item.addedNodes && item.addedNodes.length > 0 || // Check for icon or placeholder with modified attributes
        item.type === "attributes" && item.target[elementDataProperty] !== void 0
      ) {
        if (!observer.paused) {
          queueScan(node);
        }
        return;
      }
    }
  }
}
function continueObserving(node, root) {
  node.observer.instance.observe(root, observerParams);
}
function startObserver(node) {
  let observer = node.observer;
  if (observer && observer.instance) {
    return;
  }
  const root = typeof node.node === "function" ? node.node() : node.node;
  if (!root || !window) {
    return;
  }
  if (!observer) {
    observer = {
      paused: 0
    };
    node.observer = observer;
  }
  observer.instance = new window.MutationObserver(checkMutations.bind(null, node));
  continueObserving(node, root);
  if (!observer.paused) {
    queueScan(node);
  }
}
function startObservers() {
  listRootNodes().forEach(startObserver);
}
function stopObserver(node) {
  if (!node.observer) {
    return;
  }
  const observer = node.observer;
  if (observer.pendingScan) {
    clearTimeout(observer.pendingScan);
    delete observer.pendingScan;
  }
  if (observer.instance) {
    observer.instance.disconnect();
    delete observer.instance;
  }
}
function initObserver(cb) {
  const isRestart = callback !== null;
  if (callback !== cb) {
    callback = cb;
    if (isRestart) {
      listRootNodes().forEach(stopObserver);
    }
  }
  if (isRestart) {
    startObservers();
    return;
  }
  onReady(startObservers);
}
function pauseObservingNode(node) {
  (node ? [node] : listRootNodes()).forEach((node2) => {
    if (!node2.observer) {
      node2.observer = {
        paused: 1
      };
      return;
    }
    const observer = node2.observer;
    observer.paused++;
    if (observer.paused > 1 || !observer.instance) {
      return;
    }
    const instance = observer.instance;
    instance.disconnect();
  });
}
function pauseObserver(root) {
  if (root) {
    const node = findRootNode(root);
    if (node) {
      pauseObservingNode(node);
    }
  } else {
    pauseObservingNode();
  }
}
function resumeObservingNode(observer) {
  (observer ? [observer] : listRootNodes()).forEach((node) => {
    if (!node.observer) {
      startObserver(node);
      return;
    }
    const observer2 = node.observer;
    if (observer2.paused) {
      observer2.paused--;
      if (!observer2.paused) {
        const root = typeof node.node === "function" ? node.node() : node.node;
        if (!root) {
          return;
        } else if (observer2.instance) {
          continueObserving(node, root);
        } else {
          startObserver(node);
        }
      }
    }
  });
}
function resumeObserver(root) {
  if (root) {
    const node = findRootNode(root);
    if (node) {
      resumeObservingNode(node);
    }
  } else {
    resumeObservingNode();
  }
}
function observe(root, autoRemove = false) {
  const node = addRootNode(root, autoRemove);
  startObserver(node);
  return node;
}
function stopObserving(root) {
  const node = findRootNode(root);
  if (node) {
    stopObserver(node);
    removeRootNode(root);
  }
}
function propsChanged(props1, props2) {
  if (props1.name !== props2.name || props1.mode !== props2.mode) {
    return true;
  }
  const customisations1 = props1.customisations;
  const customisations2 = props2.customisations;
  for (const key in defaultExtendedIconCustomisations) {
    if (customisations1[key] !== customisations2[key]) {
      return true;
    }
  }
  return false;
}
function rotateFromString(value, defaultValue = 0) {
  const units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    while (value2 < 0) {
      value2 += 4;
    }
    return value2 % 4;
  }
  if (units === "") {
    const num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
const separator = /[\s,]+/;
function flipFromString(custom, flip) {
  flip.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "horizontal":
        custom.hFlip = true;
        break;
      case "vertical":
        custom.vFlip = true;
        break;
    }
  });
}
const sizeAttributes = ["width", "height"];
const booleanAttributes = [
  "inline",
  "hFlip",
  "vFlip"
];
function getBooleanAttribute(value, key) {
  if (value === key || value === "true") {
    return true;
  }
  if (value === "" || value === "false") {
    return false;
  }
  return null;
}
function getElementProps(element) {
  const name = element.getAttribute("data-icon");
  const icon = typeof name === "string" && stringToIcon(name, true);
  if (!icon) {
    return null;
  }
  const customisations = {
    ...defaultExtendedIconCustomisations,
    inline: element.classList && element.classList.contains(inlineClass)
  };
  sizeAttributes.forEach((attr) => {
    const value = element.getAttribute("data-" + attr);
    if (value) {
      customisations[attr] = value;
    }
  });
  const rotation = element.getAttribute("data-rotate");
  if (typeof rotation === "string") {
    customisations.rotate = rotateFromString(rotation);
  }
  const flip = element.getAttribute("data-flip");
  if (typeof flip === "string") {
    flipFromString(customisations, flip);
  }
  booleanAttributes.forEach((attr) => {
    const key = "data-" + attr;
    const value = getBooleanAttribute(element.getAttribute(key), key);
    if (typeof value === "boolean") {
      customisations[attr] = value;
    }
  });
  const mode = element.getAttribute("data-mode");
  return {
    name,
    icon,
    customisations,
    mode
  };
}
const selector = "svg." + blockClass + ", i." + blockClass + ", span." + blockClass + ", i." + inlineClass + ", span." + inlineClass;
function scanRootNode(root) {
  const nodes2 = [];
  root.querySelectorAll(selector).forEach((node) => {
    const props = node[elementDataProperty] || node.tagName.toLowerCase() !== "svg" ? getElementProps(node) : null;
    if (props) {
      nodes2.push({
        node,
        props
      });
    }
  });
  return nodes2;
}
function iconToHTML(body, attributes) {
  let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const attr in attributes) {
    renderAttribsHTML += " " + attr + '="' + attributes[attr] + '"';
  }
  return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body + "</svg>";
}
function iconClasses(iconName) {
  const classesToAdd = /* @__PURE__ */ new Set(["iconify"]);
  ["provider", "prefix"].forEach((attr) => {
    if (iconName[attr]) {
      classesToAdd.add("iconify--" + iconName[attr]);
    }
  });
  return classesToAdd;
}
function applyClasses(svg, classes, previouslyAddedClasses, placeholder) {
  const svgClasses = svg.classList;
  if (placeholder) {
    const placeholderClasses = placeholder.classList;
    Array.from(placeholderClasses).forEach((item) => {
      svgClasses.add(item);
    });
  }
  const addedClasses = [];
  classes.forEach((item) => {
    if (!svgClasses.contains(item)) {
      svgClasses.add(item);
      addedClasses.push(item);
    } else if (previouslyAddedClasses.has(item)) {
      addedClasses.push(item);
    }
  });
  previouslyAddedClasses.forEach((item) => {
    if (!classes.has(item)) {
      svgClasses.remove(item);
    }
  });
  return addedClasses;
}
function applyStyle(svg, styles, previouslyAddedStyles) {
  const svgStyle = svg.style;
  (previouslyAddedStyles || []).forEach((prop) => {
    svgStyle.removeProperty(prop);
  });
  const appliedStyles = [];
  for (const prop in styles) {
    if (!svgStyle.getPropertyValue(prop)) {
      appliedStyles.push(prop);
      svgStyle.setProperty(prop, styles[prop]);
    }
  }
  return appliedStyles;
}
function renderInlineSVG(element, props, iconData) {
  let span;
  try {
    span = document.createElement("span");
  } catch (err) {
    return element;
  }
  const customisations = props.customisations;
  const renderData = iconToSVG(iconData, customisations);
  const oldData = element[elementDataProperty];
  const html = iconToHTML(replaceIDs(renderData.body), {
    "aria-hidden": "true",
    "role": "img",
    ...renderData.attributes
  });
  span.innerHTML = html;
  const svg = span.childNodes[0];
  const placeholderAttributes = element.attributes;
  for (let i = 0; i < placeholderAttributes.length; i++) {
    const item = placeholderAttributes.item(i);
    const name = item.name;
    if (name !== "class" && !svg.hasAttribute(name)) {
      svg.setAttribute(name, item.value);
    }
  }
  const classesToAdd = iconClasses(props.icon);
  const addedClasses = applyClasses(svg, classesToAdd, new Set(oldData && oldData.addedClasses), element);
  const addedStyles = applyStyle(svg, customisations.inline ? {
    "vertical-align": "-0.125em"
  } : {}, oldData && oldData.addedStyles);
  const newData = {
    ...props,
    status: "loaded",
    addedClasses,
    addedStyles
  };
  svg[elementDataProperty] = newData;
  if (element.parentNode) {
    element.parentNode.replaceChild(svg, element);
  }
  return svg;
}
function encodeSVGforURL(svg) {
  return svg.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function svgToURL(svg) {
  return 'url("data:image/svg+xml,' + encodeSVGforURL(svg) + '")';
}
const commonProps = {
  display: "inline-block"
};
const monotoneProps = {
  "background-color": "currentColor"
};
const coloredProps = {
  "background-color": "transparent"
};
const propsToAdd = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
};
const propsToAddTo = {
  "-webkit-mask": monotoneProps,
  "mask": monotoneProps,
  "background": coloredProps
};
for (const prefix in propsToAddTo) {
  const list = propsToAddTo[prefix];
  for (const prop in propsToAdd) {
    list[prefix + "-" + prop] = propsToAdd[prop];
  }
}
function fixSize(value) {
  return value + (value.match(/^[-0-9.]+$/) ? "px" : "");
}
function renderBackground(element, props, iconData, useMask) {
  const customisations = props.customisations;
  const renderData = iconToSVG(iconData, customisations);
  const renderAttribs = renderData.attributes;
  const oldData = element[elementDataProperty];
  const html = iconToHTML(renderData.body, {
    ...renderAttribs,
    width: iconData.width + "",
    height: iconData.height + ""
  });
  const classesToAdd = iconClasses(props.icon);
  const addedClasses = applyClasses(element, classesToAdd, new Set(oldData && oldData.addedClasses));
  const url = svgToURL(html);
  const newStyles = {
    "--svg": url,
    "width": fixSize(renderAttribs.width),
    "height": fixSize(renderAttribs.height),
    ...commonProps,
    ...useMask ? monotoneProps : coloredProps
  };
  if (customisations.inline) {
    newStyles["vertical-align"] = "-0.125em";
  }
  const addedStyles = applyStyle(element, newStyles, oldData && oldData.addedStyles);
  const newData = {
    ...props,
    status: "loaded",
    addedClasses,
    addedStyles
  };
  element[elementDataProperty] = newData;
  return element;
}
let scanQueued = false;
function checkPendingIcons() {
  if (!scanQueued) {
    scanQueued = true;
    setTimeout(() => {
      if (scanQueued) {
        scanQueued = false;
        scanDOM();
      }
    });
  }
}
function scanDOM(rootNode, addTempNode = false) {
  const iconsToLoad = /* @__PURE__ */ Object.create(null);
  function getIcon2(icon, load) {
    const { provider, prefix, name } = icon;
    const storage2 = getStorage(provider, prefix);
    const storedIcon = storage2.icons[name];
    if (storedIcon) {
      return {
        status: "loaded",
        icon: storedIcon
      };
    }
    if (storage2.missing.has(name)) {
      return {
        status: "missing"
      };
    }
    if (load && !isPending(icon)) {
      const providerIconsToLoad = iconsToLoad[provider] || (iconsToLoad[provider] = /* @__PURE__ */ Object.create(null));
      const set = providerIconsToLoad[prefix] || (providerIconsToLoad[prefix] = /* @__PURE__ */ new Set());
      set.add(name);
    }
    return {
      status: "loading"
    };
  }
  (rootNode ? [rootNode] : listRootNodes()).forEach((observedNode) => {
    const root = typeof observedNode.node === "function" ? observedNode.node() : observedNode.node;
    if (!root || !root.querySelectorAll) {
      return;
    }
    let hasPlaceholders = false;
    let paused = false;
    function render(element, props, iconData) {
      if (!paused) {
        paused = true;
        pauseObservingNode(observedNode);
      }
      if (element.tagName.toUpperCase() !== "SVG") {
        const mode = props.mode;
        const isMask = mode === "mask" || (mode === "bg" ? false : mode === "style" ? iconData.body.indexOf("currentColor") !== -1 : null);
        if (typeof isMask === "boolean") {
          renderBackground(element, props, {
            ...defaultIconProps,
            ...iconData
          }, isMask);
          return;
        }
      }
      renderInlineSVG(element, props, iconData);
    }
    scanRootNode(root).forEach(({ node, props }) => {
      const oldData = node[elementDataProperty];
      if (!oldData) {
        const { status, icon } = getIcon2(props.icon, true);
        if (icon) {
          render(node, props, icon);
          return;
        }
        hasPlaceholders = hasPlaceholders || status === "loading";
        node[elementDataProperty] = {
          ...props,
          status
        };
        return;
      }
      let item;
      if (!propsChanged(oldData, props)) {
        const oldStatus = oldData.status;
        if (oldStatus !== "loading") {
          return;
        }
        item = getIcon2(props.icon, false);
        if (!item.icon) {
          oldData.status = item.status;
          return;
        }
      } else {
        item = getIcon2(props.icon, oldData.name !== props.name);
        if (!item.icon) {
          hasPlaceholders = hasPlaceholders || item.status === "loading";
          Object.assign(oldData, {
            ...props,
            status: item.status
          });
          return;
        }
      }
      render(node, props, item.icon);
    });
    if (observedNode.temporary && !hasPlaceholders) {
      stopObserving(root);
    } else if (addTempNode && hasPlaceholders) {
      observe(root, true);
    } else if (paused && observedNode.observer) {
      resumeObservingNode(observedNode);
    }
  });
  for (const provider in iconsToLoad) {
    const providerIconsToLoad = iconsToLoad[provider];
    for (const prefix in providerIconsToLoad) {
      const set = providerIconsToLoad[prefix];
      loadIcons(Array.from(set).map((name) => ({
        provider,
        prefix,
        name
      })), checkPendingIcons);
    }
  }
}
function scanElement(root) {
  const node = findRootNode(root);
  if (!node) {
    scanDOM({
      node: root,
      temporary: true
    }, true);
  } else {
    scanDOM(node);
  }
}
function generateIcon(name, customisations, returnString = false) {
  const iconData = getIconData(name);
  if (!iconData) {
    return null;
  }
  const iconName = stringToIcon(name);
  const changes = mergeCustomisations(defaultExtendedIconCustomisations, customisations || {});
  const result = renderInlineSVG(document.createElement("span"), {
    name,
    icon: iconName,
    customisations: changes
  }, iconData);
  return returnString ? result.outerHTML : result;
}
function getVersion() {
  return "3.1.0";
}
function renderSVG(name, customisations) {
  return generateIcon(name, customisations, false);
}
function renderHTML(name, customisations) {
  return generateIcon(name, customisations, true);
}
function renderIcon(name, customisations) {
  const iconData = getIconData(name);
  if (!iconData) {
    return null;
  }
  const changes = mergeCustomisations(defaultExtendedIconCustomisations, customisations || {});
  return iconToSVG(iconData, changes);
}
function scan(root) {
  if (root) {
    scanElement(root);
  } else {
    scanDOM();
  }
}
if (typeof document !== "undefined" && typeof window !== "undefined") {
  addBodyNode();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload2 = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload2 === "object" && preload2 !== null) {
      (preload2 instanceof Array ? preload2 : [preload2]).forEach((item) => {
        try {
          if (
            // Check if item is an object and not null/array
            typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
            typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
            !addCollection(item)
          ) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      });
    }
  }
  setTimeout(() => {
    initObserver(scanDOM);
    scanDOM();
  });
}
function enableCache(storage2, enable) {
  toggleBrowserCache(storage2, enable !== false);
}
function disableCache(storage2) {
  toggleBrowserCache(storage2, true);
}
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  initBrowserStorage();
  const _window2 = window;
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (const key in providers) {
        const err = "IconifyProviders[" + key + "] is invalid.";
        try {
          const value = providers[key];
          if (typeof value !== "object" || !value || value.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key, value)) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      }
    }
  }
}
const _api = {
  getAPIConfig,
  setAPIModule,
  sendAPIQuery,
  setFetch,
  getFetch,
  listAPIProviders
};
const Iconify$1 = {
  // IconifyAPIInternalFunctions
  _api,
  // IconifyAPIFunctions
  addAPIProvider,
  loadIcons,
  loadIcon,
  // IconifyStorageFunctions
  iconExists,
  getIcon,
  listIcons,
  addIcon,
  addCollection,
  // IconifyBuilderFunctions
  replaceIDs,
  calculateSize,
  buildIcon: iconToSVG,
  // IconifyCommonFunctions
  getVersion,
  renderSVG,
  renderHTML,
  renderIcon,
  scan,
  observe,
  stopObserving,
  pauseObserver,
  resumeObserver,
  // IconifyBrowserCacheFunctions
  enableCache,
  disableCache
};
try {
  if (self.Iconify === void 0) {
    self.Iconify = Iconify$1;
  }
} catch (err) {
}
const Iconify = Iconify$1.default || Iconify$1;
const collections = JSON.parse('[{"prefix":"fa","width":1536,"height":1536,"icons":{"chevron-left":{"body":"<path fill=\\"currentColor\\" d=\\"M1043 301L512 832l531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19L45 877q-19-19-19-45t19-45L787 45q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z\\"/>","width":1088,"height":1664},"creative-commons":{"body":"<path fill=\\"currentColor\\" d=\\"M605 1233q153 0 257-104q14-18 3-36l-45-82q-6-13-24-17q-16-2-27 11l-4 3q-4 4-11.5 10t-17.5 13.5t-23.5 14.5t-28.5 13t-33.5 9.5t-37.5 3.5q-76 0-125-50t-49-127q0-76 48-125.5T609 720q37 0 71.5 14t50.5 28l16 14q11 11 26 10q16-2 24-14l53-78q13-20-2-39q-3-4-11-12t-30-23.5t-48.5-28T691 569t-86-10q-148 0-246 96.5T261 896q0 146 97 241.5t247 95.5zm630 0q153 0 257-104q14-18 4-36l-45-82q-8-14-25-17q-16-2-27 11l-4 3q-4 4-11.5 10t-17.5 13.5t-23.5 14.5t-28.5 13t-33.5 9.5t-37.5 3.5q-76 0-125-50t-49-127q0-76 48-125.5t122-49.5q37 0 71.5 14t50.5 28l16 14q11 11 26 10q16-2 24-14l53-78q13-20-2-39q-3-4-11-12t-30-23.5t-48.5-28T1321 569t-86-10q-147 0-245.5 96.5T891 896q0 146 97 241.5t247 95.5zM896 160q-150 0-286 58.5t-234.5 157t-157 234.5T160 896t58.5 286t157 234.5t234.5 157t286 58.5t286-58.5t234.5-157t157-234.5t58.5-286t-58.5-286t-157-234.5t-234.5-157T896 160zm0-160q182 0 348 71t286 191t191 286t71 348t-71 348t-191 286t-286 191t-348 71t-348-71t-286-191t-191-286T0 896t71-348t191-286T548 71T896 0z\\"/>","width":1792,"height":1792},"meetup":{"body":"<path fill=\\"currentColor\\" d=\\"M1302 1234q-4-24-27.5-34t-49.5-10.5t-48.5-12.5t-25.5-38q-5-47 33-139.5t75-181t32-127.5q-14-101-117-103q-45-1-75 16l-3 2l-5 2.5l-4.5 2l-5 2l-5 .5l-6-1.5l-6-3.5l-6.5-5q-3-2-9-8.5t-9-9t-8.5-7.5t-9.5-7.5t-9.5-5.5t-11-4.5T990 558q-30-5-48 3t-45 31q-1 1-9 8.5t-12.5 11t-15 10T844 627t-17-3q-54-27-84-40q-41-18-94 5t-76 65q-16 28-41 98.5T488.5 885t-40 134t-21.5 73q-22 69 18.5 119t110.5 46q30-2 50.5-15t38.5-46q7-13 79-199.5T801 802q6-11 21.5-18t29.5 0q27 15 21 53q-2 18-51 139.5T772 1109q-6 38 19.5 56.5t60.5 7t55-49.5q4-8 45.5-92t81.5-163.5t46-88.5q20-29 41-28q29 0 25 38q-2 16-65.5 147.5T1010 1096q-12 53 13 103t74 74q17 9 51 15.5t71.5 8t62.5-14t20-48.5zm-951 216q3 15-5 27.5t-23 15.5q-14 3-26.5-5t-15.5-23q-3-14 5-27t22-16t27 5t16 23zm570 263q12 17 8.5 37.5T909 1783t-37.5 8t-32.5-21q-11-17-7.5-37.5T852 1700t37.5-8t31.5 21zM145 901q-18 27-49.5 33T38 921q-26-18-32-50t12-58q18-27 49.5-33t57.5 12q26 19 32 50.5T145 901zm1290 677q19 28 13 61.5t-34 52.5t-60.5 13t-51.5-34t-13-61t33-53q28-19 60.5-13t52.5 34zm112-604q69 113 42.5 244.5T1455 1426q-90 63-199 60q-20 80-84.5 127t-143.5 44.5t-140-57.5q-12 9-13 10q-103 71-225 48.5T457 1532q-50-73-53-164q-83-14-142.5-70.5t-80.5-128t-2-152T260 879q-36-60-38-128t24.5-125t79.5-98.5T447 477q32-85 99-148t146.5-91.5t168-17T1020 287q72-21 140-17.5t128.5 36t104.5 80t67.5 115T1478 641q52 16 87 57t45.5 89t-5.5 99.5t-58 87.5zM423 314q14 20 9.5 44.5T408 397q-19 14-43.5 9.5T327 382q-14-20-9.5-44.5T342 299q19-14 43.5-9.5T423 314zM582 33q4 16-5 30.5T551 82t-31-5.5T502 50q-3-17 6.5-31T534 1q17-4 31 5.5T582 33zm1186 948q4 20-6.5 37t-30.5 21q-19 4-36-6.5t-21-30.5t6.5-37t30.5-22q20-4 36.5 7.5T1768 981zM1104 88q16 27 8.5 58.5T1077 194q-27 16-57.5 8.5T973 168q-16-28-8.5-59T999 61t58-9t47 36zm746 656q4 15-4 27.5t-23 16.5q-15 3-27.5-5.5T1780 760q-3-15 5-28t23-16q14-3 26.5 5t15.5 23zm-191-241q15 22 10.5 49t-26.5 43q-22 15-49 10t-42-27t-10-49t27-43t48.5-11t41.5 28z\\"/>","width":1856,"height":1792},"vimeo":{"body":"<path fill=\\"currentColor\\" d=\\"M1645 326q-10 236-332 651q-333 431-562 431q-142 0-240-263q-44-160-132-482q-72-262-157-262q-18 0-127 76l-77-98q24-21 108-96.5T256 167Q412 29 497 21q95-9 153 55.5T731 280q44 287 66 373q55 249 120 249q51 0 154-161q101-161 109-246q13-139-109-139q-57 0-121 26Q1070-11 1409 0q251 8 236 326z\\"/>","width":1664,"height":1408},"chevron-right":{"body":"<path fill=\\"currentColor\\" d=\\"M1043 301L512 832l531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19L45 877q-19-19-19-45t19-45L787 45q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z\\"/>","width":1088,"height":1664,"hFlip":true}}},{"prefix":"system-uicons","width":21,"height":21,"icons":{"tags":{"body":"<g fill=\\"none\\" fill-rule=\\"evenodd\\" transform=\\"translate(1 3)\\"><path stroke=\\"currentColor\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"M11.914.5H15.5a2 2 0 0 1 2 2v3.586a1 1 0 0 1-.293.707l-6.793 6.793a2 2 0 0 1-2.828 0l-3.172-3.172a2 2 0 0 1 0-2.828L11.207.793A1 1 0 0 1 11.914.5z\\"/><path stroke=\\"currentColor\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" d=\\"m7.5 13.5l-2.013 1.006A2 2 0 0 1 2.72 13.42L1.105 9.114a2 2 0 0 1 .901-2.45L9.5 2.5\\"/><rect width=\\"2\\" height=\\"2\\" x=\\"14\\" y=\\"2\\" fill=\\"currentColor\\" rx=\\"1\\"/></g>"}}},{"prefix":"akar-icons","width":24,"height":24,"icons":{"arrow-forward-thick":{"body":"<path fill=\\"none\\" stroke=\\"currentColor\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"m22 11l-7-9v5C3.047 7 1.668 16.678 2 22c.502-2.685.735-7 13-7v5l7-9Z\\"/>"},"more-horizontal-fill":{"body":"<path fill=\\"currentColor\\" fill-rule=\\"evenodd\\" d=\\"M2 12a2 2 0 1 1 4 0a2 2 0 0 1-4 0Zm8 0a2 2 0 1 1 4 0a2 2 0 0 1-4 0Zm8 0a2 2 0 1 1 4 0a2 2 0 0 1-4 0Z\\" clip-rule=\\"evenodd\\"/>"}}}]');
collections.forEach((c) => Iconify.addCollection(c));
class ThemeConfigImpl {
  constructor(schemas) {
    __publicField(this, "schemas");
    this.schemas = schemas;
  }
  isEmpty() {
    return !this.schemas;
  }
  getValue(key, type) {
    if (this.isEmpty()) {
      return void 0;
    }
    if (!(key.toString() in this.schemas)) {
      return void 0;
    }
    return new type(this.schemas[key.toString()]);
  }
}
class SakuraDocumentFunctionImpl {
  constructor(target, name, method, isRefresh) {
    __publicField(this, "isRefresh");
    __publicField(this, "target");
    __publicField(this, "name");
    __publicField(this, "method");
    __publicField(this, "execCount", 0);
    __publicField(this, "pageData", /* @__PURE__ */ new Map());
    this.target = target;
    this.name = name;
    this.method = method;
    this.isRefresh = isRefresh;
    this.pageData = Util.jsonToMap(pageData);
  }
  execute() {
    if (!this.isRefresh) {
      if (this.execCount.valueOf() > 0) {
        return;
      }
    }
    this.method.call(this.target, this.pageData);
    this.execCount = this.execCount.valueOf() + 1;
  }
}
class SakuraDocumentFunctionFactory {
  constructor() {
    __publicField(this, "documentFunctions");
    this.documentFunctions = /* @__PURE__ */ new Set();
  }
  geDocumentFunctionCount() {
    return this.documentFunctions.size;
  }
  getDocumentFunctions() {
    return this.documentFunctions;
  }
  registerDocumentFunction(documentFunction2) {
    this.documentFunctions.add(documentFunction2);
  }
  getDocumentFunction(name) {
    if (!name || !this.documentFunctions) {
      return void 0;
    }
    for (const documentFunction2 of this.documentFunctions) {
      if (documentFunction2.name === name) {
        return documentFunction2;
      }
    }
    return void 0;
  }
}
class SakuraApp {
  constructor(config2) {
    __publicField(this, "config");
    __publicField(this, "themeconfigs");
    __publicField(this, "currPageData", /* @__PURE__ */ new Map());
    __publicField(this, "startupDate", /* @__PURE__ */ new Date());
    __publicField(this, "documentFunctionFactory", new SakuraDocumentFunctionFactory());
    __publicField(this, "events", /* @__PURE__ */ new Map());
    __publicField(this, "REFRESH_EVENT_NAME", "sakura:refresh");
    this.config = config2;
    this.themeconfigs = /* @__PURE__ */ new Map();
    this.refreshThemeConfig();
  }
  refreshThemeConfig() {
    if (!this.config) {
      return;
    }
    let groupMap = JSON.parse(this.config.toString());
    Object.keys(groupMap).forEach((key) => {
      let themeConfig = new ThemeConfigImpl(groupMap[key]);
      this.themeconfigs.set(key, themeConfig);
    });
  }
  getThemeConfig(group) {
    let themeConfig = this.themeconfigs.get(group);
    if (!themeConfig) {
      return new ThemeConfigImpl();
    }
    return themeConfig;
  }
  getPageConfig() {
    return this.currPageData;
  }
  /**
   * 页面变化时，刷新 Sakura 所需更新的公共状态。
   *
   * <P>
   * 特别的，为了减少公共 JS 的大小，不建议在此方法内调用状态可变的功能刷新方法。例如可由用户开启或关闭的功能。
   * 此类开放功能可由内联代码使用 window 监听事件 "sakura:refresh" 来进行刷新,也可以放在 `lib` 目录下，之后
   * 在主题端使用 `script` 标签引入。
   * <P>
   */
  refresh() {
    this.prepareRefresh();
    this.registerRoute();
    this.obtainFunctionFactory();
    this.registerDomProcessors();
    this.initEventMulticaster();
    this.finishDocumentFunction();
    this.finishRefresh();
  }
  /**
   * 注册 documentFunction 函数，该类函数通常为动态加载。
   *
   * @param name 函数名
   * @param method 函数
   */
  registerDocumentFunction(documentFunction2) {
    this.obtainFunctionFactory();
    this.documentFunctionFactory.registerDocumentFunction(documentFunction2);
    documentFunction2.execute();
  }
  finishDocumentFunction() {
    const functions2 = this.documentFunctionFactory.getDocumentFunctions();
    for (const documentFunction2 of functions2) {
      documentFunction2.execute();
    }
  }
  registerDomProcessors() {
    let initFuncitons = getInitDocumentFunctions();
    for (const documentFunction2 of initFuncitons) {
      const personObj = documentFunction2;
      this.documentFunctionFactory.registerDocumentFunction(
        new SakuraDocumentFunctionImpl(personObj.target, personObj.propertyKey, personObj.method, personObj.isRefresh)
      );
    }
    initFuncitons.clear();
    if (this.getThemeConfig("advanced").getValue("log", Boolean)) {
      console.log("共获取预设 documentFunction " + functions.size + " 个");
    }
  }
  obtainFunctionFactory() {
    if (!this.documentFunctionFactory) {
      this.documentFunctionFactory = new SakuraDocumentFunctionFactory();
    }
    return this.documentFunctionFactory;
  }
  prepareRefresh() {
    this.startupDate = /* @__PURE__ */ new Date();
    this.refreshMetadata();
    if (this.getThemeConfig("advanced").getValue("log", Boolean)) {
      console.log("Sakura Refreshing");
    }
  }
  refreshMetadata() {
    try {
      this.currPageData = Util.jsonToMap(pageData);
    } catch (error) {
      console.error("解析 pageData 失败：", error);
    }
  }
  async registerRoute() {
    const _templateId = this.currPageData.get("_templateId");
    if (!_templateId) {
      return;
    }
    const modulePath = `./page/${_templateId}.min.js`;
    await __vitePreload(() => import(modulePath), true ? [] : void 0);
  }
  initEventMulticaster() {
    let refreshEvent = this.events.get(this.REFRESH_EVENT_NAME);
    if (!refreshEvent) {
      refreshEvent = new CustomEvent(this.REFRESH_EVENT_NAME.toString());
      this.events.set(this.REFRESH_EVENT_NAME, refreshEvent);
    }
  }
  finishRefresh() {
    let refreshEvent = this.events.get(this.REFRESH_EVENT_NAME);
    window.dispatchEvent(refreshEvent);
    if (this.getThemeConfig("advanced").getValue("log", Boolean)) {
      console.log("finish Refreshing");
    }
  }
}
var sakura = new SakuraApp(config);
document.addEventListener("DOMContentLoaded", () => {
  sakura.refresh();
});
var functions;
function getInitDocumentFunctions() {
  return functions;
}
function documentFunction(isRefresh = true) {
  return function(target, propertyKey, descriptor) {
    if (!sakura) {
      if (!functions) {
        functions = /* @__PURE__ */ new Set();
      }
      const jsonObj = {
        target,
        propertyKey,
        method: descriptor.value,
        isRefresh
      };
      functions.add(jsonObj);
      return;
    }
    sakura.registerDocumentFunction(new SakuraDocumentFunctionImpl(target, propertyKey, descriptor.value, isRefresh));
  };
}
export {
  Util as U,
  __vitePreload as _,
  documentFunction as d,
  sakura as s
};
