var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { d as documentFunction, s as sakura, _ as __vitePreload } from "../main.min.js";
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp2(target, key, result);
  return result;
};
class Index {
  constructor() {
    __publicField(this, "videoPlayer");
  }
  registerArrowDown() {
    const arrowDownElement = document.querySelector(".headertop-down");
    arrowDownElement == null ? void 0 : arrowDownElement.addEventListener("click", () => {
      var _a;
      const contentOffset = ((_a = document.querySelector(".site-content")) == null ? void 0 : _a.getBoundingClientRect().top) || 0;
      window.scrollTo({
        top: contentOffset + +window.pageYOffset,
        behavior: "smooth"
      });
    });
  }
  registerBackgroundChangeEvent() {
    const backgorundElement = document.querySelector(".bg-change-js");
    if (!backgorundElement) {
      return;
    }
    const backgroundNextBotton = document.getElementById("bg-next");
    const backgroundPrevBotton = document.getElementById("bg-prev");
    const backgroundLoopSize = (sakura.getThemeConfig("random_image", "rimage_cover_back_num", Number) || 0).valueOf();
    backgroundNextBotton == null ? void 0 : backgroundNextBotton.addEventListener("click", () => {
      let currIndex = Number(backgorundElement.getAttribute("data-currIndex"));
      if (backgroundLoopSize === 0) {
        currIndex = Math.ceil(Math.random() * 99);
      } else {
        currIndex = (currIndex + 1) % backgroundLoopSize;
      }
      handlerChangeBackground(currIndex);
    });
    backgroundPrevBotton == null ? void 0 : backgroundPrevBotton.addEventListener("click", () => {
      let currIndex = Number(backgorundElement.getAttribute("data-currIndex"));
      if (backgroundLoopSize === 0) {
        currIndex = Math.ceil(Math.random() * 99);
      } else {
        currIndex = (currIndex - 1 + backgroundLoopSize) % backgroundLoopSize;
      }
      handlerChangeBackground(currIndex);
    });
    const handlerChangeBackground = (backageImageIndex) => {
      const randomUrl = backgorundElement.getAttribute("data-url");
      backgorundElement.src = `${randomUrl}&t=${backageImageIndex}`;
      backgorundElement.setAttribute("data-currIndex", `${backageImageIndex}`);
    };
  }
  registerBackgroundVideo() {
    const videoContainerElement = document.querySelector(".video-container");
    if (!videoContainerElement) {
      return;
    }
    videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
    const videoStatusElement = videoContainerElement.querySelector(".video-status");
    const focusInfoElement = document.querySelector(".focusinfo");
    const videoPlayButtonElement = videoContainerElement.querySelector(".video-play");
    const videoPauseButtonElement = videoContainerElement.querySelector(".video-pause");
    videoPlayButtonElement == null ? void 0 : videoPlayButtonElement.addEventListener("click", async () => {
      videoStatusElement.innerHTML = "正在载入视频 ...";
      videoStatusElement.style.bottom = "0";
      if (!this.videoPlayer) {
        __vitePreload(() => import("../assets/video.es-2300b3ab.js"), true ? [] : void 0).then((module) => {
          var _a;
          this.videoPlayer = module.default(videoContainerElement.querySelector("video"), {
            controls: false,
            controlsBar: false,
            children: ["MediaLoader"],
            autoplay: false,
            preload: "auto",
            muted: false,
            loop: false,
            sources: [
              {
                src: (_a = sakura.getThemeConfig("mainScreen", "bgvideo_url", String)) == null ? void 0 : _a.toString()
              }
            ]
          });
          this.videoPlayer.on("loadeddata", () => {
            videoStatusElement.style.bottom = "-100px";
            focusInfoElement.style.top = "-999px";
            videoPlayButtonElement.style.display = "none";
            videoPauseButtonElement.style.display = "block";
            this.videoPlayer.play();
          });
          this.videoPlayer.on("play", () => {
            videoStatusElement.style.bottom = "-100px";
            focusInfoElement.style.top = "-999px";
            videoPlayButtonElement.style.display = "none";
            videoPauseButtonElement.style.display = "block";
          });
          this.videoPlayer.on("pause", () => {
            videoStatusElement.innerHTML = "已暂停 ...";
            videoStatusElement.style.bottom = "0";
            focusInfoElement.style.top = "0";
            videoPlayButtonElement.style.display = "block";
            videoPauseButtonElement.style.display = "none";
          });
          this.videoPlayer.on("waiting", () => {
            videoStatusElement.innerHTML = "加载中 ...";
            videoStatusElement.style.bottom = "0";
          });
          this.videoPlayer.on("canplay", () => {
            videoStatusElement.style.bottom = "-100px";
          });
          this.videoPlayer.on("error", () => {
            videoStatusElement.innerHTML = "视频播放错误";
            setTimeout(() => {
              focusInfoElement.style.top = "0";
              videoStatusElement.style.bottom = "-100px";
              videoPlayButtonElement.style.display = "block";
              videoPauseButtonElement.style.display = "none";
              this.videoPlayer.dispose();
              videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
              this.videoPlayer = void 0;
            }, 2e3);
          });
          this.videoPlayer.on("ended", () => {
            focusInfoElement.style.top = "0";
            videoStatusElement.style.bottom = "-100px";
            videoPlayButtonElement.style.display = "block";
            videoPauseButtonElement.style.display = "none";
            this.videoPlayer.dispose();
            videoContainerElement.insertAdjacentElement("afterbegin", document.createElement("video"));
            this.videoPlayer = void 0;
          });
        }).catch((error) => {
          console.error(error);
          videoStatusElement.innerHTML = "视频加载失败";
          videoStatusElement.style.bottom = "0";
          setTimeout(() => {
            videoStatusElement.style.bottom = "-100px";
          }, 2e3);
        });
      } else {
        this.videoPlayer.play();
      }
    });
    videoPauseButtonElement == null ? void 0 : videoPauseButtonElement.addEventListener("click", () => {
      if (this.videoPlayer) {
        this.videoPlayer.pause();
      }
    });
  }
}
__decorateClass([
  documentFunction(false)
], Index.prototype, "registerArrowDown", 1);
__decorateClass([
  documentFunction(false)
], Index.prototype, "registerBackgroundChangeEvent", 1);
__decorateClass([
  documentFunction(false)
], Index.prototype, "registerBackgroundVideo", 1);
