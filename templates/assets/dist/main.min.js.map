{"version":3,"file":"main.min.js","sources":["../../../src/module/tab.ts","../../../src/main.ts"],"sourcesContent":["import { sakura, documentFunction } from \"../main\";\n\nexport class Tab {\n  @documentFunction()\n  public registerTabsTag() {\n    console.log(sakura);\n  }\n}","import \"@/module/index\";\nimport \"@/css/index.css\";\n\n/* 核心启动，通常不建议也不应当由用户调用，只能由启动代码使用  */\ninterface Sakura {\n  getThemeConfig(group: String): ThemeConfig\n  refresh(): void;\n}\n\ndeclare var Sakura: {\n  prototype: Sakura;\n  new(config?: String): Sakura;\n}\n\ninterface ThemeConfig {\n  isEmpty(): Boolean;\n  getValue<T extends Number | String | Boolean | ThemeConfig[]>(key: String, type: new(...args: any) => T): T | undefined;\n}\n\nclass ThemeConfigImpl implements ThemeConfig {\n\n  private schemas?: any\n\n  constructor(schemas?: any) {\n    this.schemas = schemas;\n  }\n\n  isEmpty(): Boolean {\n    return !this.schemas;\n  }\n\n  getValue<T extends Number | String | Boolean | ThemeConfig[]>(key: String, type: new(...args: any) => T): T | undefined {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    if (!(key.toString() in this.schemas)) {\n      return undefined;\n    }\n    return new type(this.schemas.key);\n  }\n}\n\ninterface DocumentFunctionFactory {\n  registerDocumentFunction(name: String, method: Function): void;\n\n  getDocumentFunction(name: String): Function | undefined;\n\n  getDocumentFunctions(): Map<String, Function>;\n\n  getDocumentFunctionNames(): Iterable<String>;\n\n  geDocumentFunctionCount(): Number;\n}\n\nclass SakuraDocumentFunctionFactory implements DocumentFunctionFactory {\n\n  private documentFunctions: Map<String, Function>;\n\n  constructor() {\n    this.documentFunctions = new Map();\n  }\n\n  geDocumentFunctionCount(): Number {\n    return this.documentFunctions.size;\n  }\n\n  getDocumentFunctions(): Map<String, Function> {\n    return this.documentFunctions;\n  }\n\n  getDocumentFunctionNames(): Iterable<String> {\n    if (this.documentFunctions.size === 0) {\n      return new Set();\n    }\n    return this.documentFunctions.keys();\n  }\n\n  registerDocumentFunction(methodName: String, methodFunction: Function): void {\n    this.documentFunctions.set(methodName, methodFunction);\n  }\n  \n  getDocumentFunction(name: String): Function | undefined {\n    if (!this.documentFunctions.has(name)) {\n      return undefined;\n    }\n    return this.documentFunctions.get(name);\n  }\n}\n\nexport class SakuraApp implements Sakura {\n\n  private readonly config?: String;\n\n  private themeconfigs: Map<String, ThemeConfig>;\n  \n  private startupDate: Date = new Date();\n\n  private documentFunctionFactory: DocumentFunctionFactory = new SakuraDocumentFunctionFactory();\n\n  private events: Map<String, Event> = new Map();\n\n  public readonly REFRESH_EVENT_NAME: String = \"sakura:refresh\"\n\n  constructor(config?: String) {\n    this.config = config;\n    this.themeconfigs = new Map();\n    this.createThemeConfig();\n  }\n\n  private createThemeConfig() {\n    if (!this.config) {\n      return;\n    }\n    let groupMap = JSON.parse(this.config.toString());\n    Object.keys(groupMap).forEach(key => {\n      let themeConfig = new ThemeConfigImpl(groupMap[key]); \n      this.themeconfigs.set(key, themeConfig);\n    })\n  }\n\n  getThemeConfig(group: String): ThemeConfig {\n    let themeConfig = this.themeconfigs.get(group)\n    if (!themeConfig) {\n      return new ThemeConfigImpl();\n    }\n    return themeConfig;\n  }\n\n  /**\n   * 页面变化时，刷新 Sakura 所需更新的公共状态。\n   * \n   * <P>\n   * 特别的，为了减少公共 JS 的大小，不建议在此方法内调用状态可变的功能刷新方法。例如可由用户开启或关闭的功能。\n   * 此类开放功能可由内联代码使用 window 监听事件 \"sakura:refresh\" 来进行刷新,也可以放在 `lib` 目录下，之后\n   * 在主题端使用 `script` 标签引入。\n   * <P>\n   */\n  public refresh(): void {\n    // 初始化刷新前置\n    this.prepareRefresh();\n    // 获取 Dom 函数工厂\n    let functionFactory = this.obtainFunctionFactory();\n    // 注册 DOM 处理器\n    this.registerDomProcessors(functionFactory);\n    // 初始化事件广播器\n    this.initEventMulticaster();\n    // 处理所有 DocumentFunction\n    this.finishDocumentFunction(functionFactory);\n    // 结束刷新\n    this.finishRefresh();\n  }\n\n  protected finishDocumentFunction(factory: DocumentFunctionFactory): void {\n    let functions = factory.getDocumentFunctions();\n    for (let [key, value] of functions) {\n      value();\n    }\n  }\n  \n  protected obtainFunctionFactory(): DocumentFunctionFactory {\n    if (!this.documentFunctionFactory) {\n      this.documentFunctionFactory = new SakuraDocumentFunctionFactory();\n    }\n    return this.documentFunctionFactory;\n  }\n\n  protected prepareRefresh(): void {\n    this.startupDate = new Date();\n    if (this.getThemeConfig(\"advanced\").getValue(\"log\", Boolean)) {\n      console.log(\"Sakura Refreshing\")\n    }\n    //TODO: 刷新每一页可变属性\n    this.refreshMetadata();\n  }\n\n  protected refreshMetadata() {\n  }\n\n  protected registerDomProcessors(factory: DocumentFunctionFactory): void {\n    let functions = getDocumentFunctions();\n    functions.forEach((value, key) => {\n      factory.registerDocumentFunction(key, value);\n    })\n    if (this.getThemeConfig(\"advanced\").getValue(\"log\", Boolean)) {\n      console.log(\"共获取预设 documentFunction \" + factory.geDocumentFunctionCount() + \" 个\");\n    }\n  }\n\n  protected initEventMulticaster(): void {\n    let refreshEvent = this.events.get(this.REFRESH_EVENT_NAME);\n    if (!refreshEvent) {\n      //TODO 将每页的可变属性传递给事件\n      refreshEvent = new CustomEvent(this.REFRESH_EVENT_NAME.toString());\n      this.events.set(this.REFRESH_EVENT_NAME, refreshEvent);\n    }\n  }\n\n  protected finishRefresh(): void {\n    let refreshEvent = this.events.get(this.REFRESH_EVENT_NAME) as Event;\n    window.dispatchEvent(refreshEvent);\n    if (this.getThemeConfig(\"advanced\").getValue(\"log\", Boolean)) {\n      console.log(\"finish Refreshing\")\n    }\n  }\n}\n\n// 全局配置文件变量，由主题提供\ndeclare const config: any\nexport let sakura: Sakura;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  sakura = new SakuraApp(config);\n  sakura.refresh();\n})\n\nvar functions: Map<String, Function>;\n\nfunction getDocumentFunctions(): Map<String, Function> {\n  return functions;\n}\n    \nexport function documentFunction() {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    if (!functions) {\n      functions = new Map();\n    }\n    functions.set(propertyKey, target[propertyKey])\n  };\n}\n\nwindow.addEventListener(\"sakura:refresh\", () => {\n  console.log(\"event -> refresh\");\n})"],"names":["Tab","sakura","__decorateClass","documentFunction","ThemeConfigImpl","schemas","__publicField","key","type","SakuraDocumentFunctionFactory","methodName","methodFunction","name","SakuraApp","config","groupMap","themeConfig","group","functionFactory","factory","functions","value","getDocumentFunctions","refreshEvent","target","propertyKey","descriptor"],"mappings":"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"}